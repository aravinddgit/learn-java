jshell> int result = 1 + 2; // 1 + 2 = 3
result ==> 3

jshell> int previousResult = result;
previousResult ==> 3

// Even though the value of result is changesd, the value of previousResult will not change. It will still contain the original value assigned to it
jshell> result = result - 1; // 3 - 1 = 2
result ==> 2

jshell> System.out.print(previousResult);
3


jshell> char firstChar = 'A'; char secondChar = 'B';
firstChar ==> 'A'
secondChar ==> 'B'

// The addition of char variables will result in the addition of the decimal value of the unicode representation
jshell> System.out.print(firstChar + secondChar);
131

// However, operations with String will convert the char to a string.
jshell> System.out.print("" + firstChar + secondChar);
AB


jshell> result = 2;
result ==> 2

jshell> result = result * 10;
result ==> 20

jshell> result = result / 4;
result ==> 5

jshell> result = result % 3; // remainder or modulo operator
result ==> 2

// None of the operators are applicable to Boolean
// All of the operators are applicable to char as they are stored as decimal number values of their unicode representation.

jshell> {
   ...>     int result = 1;
   ...>     result = result + 1;
   ...>     System.out.print("result: " + result);
   ...> }
result: 2
jshell> {
   ...>     int result = 1;
   ...>     result++;
   ...>     System.out.print("result: " + result);
   ...> }
result: 2
jshell> {
   ...>     int result = 1;
   ...>     result--;
   ...>     System.out.print("result: " + result);
   ...> }
result: 0
jshell> {
   ...>     int result = 1;
   ...>     result-=1;
   ...>     System.out.print("result: " + result);
   ...> }
result: 0
jshell> {
   ...>     int result = 1;
   ...>     result += 1;
   ...>     System.out.print("result: " + result);
   ...> }
result: 2
jshell> {
   ...>     int result = 1;
   ...>     result += 5;
   ...>     System.out.print("result: " + result);
   ...> }
result: 6
jshell> {
   ...>     int result = 10;
   ...>     result += 5;
   ...>     System.out.print("result: " + result);
   ...> }
result: 15
jshell> {
   ...>     int result = 10;
   ...>     result -= 5;
   ...>     System.out.print("result: " + result);
   ...> }
result: 5

/** Here, we can see that :
x -= y
is not actually
x = x - y
but rather
x = (type of x) (x-y)
since the datatypes of x and y are different.

Note that, here, no error occurs though. If the expression was actually not using the abbreviated operators, an error would have occurred. i.e if we had used:
x = x - y instead of x -= y , we would have got lossy conversion error instead of the an incorrect answer.
**/
jshell> {
   ...>     int result = 10;
   ...>     result -= 5.5;  // Implicit type cast is being done by the compound assignment operator
   ...>     System.out.print("result: " + result);
   ...> }
result: 4
jshell> {
   ...>     int result = 10;
   ...>     result = result - 5.5;
   ...>     System.out.print("result: " + result);
   ...> }
|  Error:
|  incompatible types: possible lossy conversion from double to int
|      result = result - 5.5;
|               ^----------^

jshell> {
   ...>     int result = 10;
   ...>     result = (int) (result - 5.5);
   ...>     System.out.print("result: " + result);
   ...> }
result: 4
jshell> {
   ...>     double result = 10; // using a double to prevent lossy conversion
   ...>     result -= 5.5;
   ...>     System.out.print("result: " + result);
   ...> }
result: 4.5
jshell> {
   ...>     double result = 10; // using a double to prevent lossy conversion
   ...>     result *= 1.5;
   ...>     System.out.print("result: " + result);
   ...> }
result: 15.0
jshell> {
   ...>     double result = 10; // using a double to prevent lossy conversion
   ...>     result /= 1.5;
   ...>     System.out.print("result: " + result);
   ...> }
result: 6.666666666666667
jshell>