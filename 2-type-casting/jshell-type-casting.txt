jshell> short MyMinSortValue = Short.MIN_VALUE; int myMinIntValue = Integer.MIN_VALUE;
MyMinSortValue ==> -32768
myMinIntValue ==> -2147483648

jshell> byte myMinByteValue = Byte.MIN_VALUE, myMaxByteValue = Byte.MAX_VALUE;
myMinByteValue ==> -128
myMaxByteValue ==> 127

jshell> short firstShort = 1, int firstInteger = 2;
|  Error:
|  <identifier> expected
|  short firstShort = 1, int firstInteger = 2;
|                       ^

jshell> short firstShort = 1; int firstInteger = 2;
firstShort ==> 1
firstInteger ==> 2

jshell> byte firstByte = 1, byte secondByte = 2;
|  Error:
|  <identifier> expected
|  byte firstByte = 1, byte secondByte = 2;
|                     ^

jshell> byte firstByte = 1, secondByte = 2;
firstByte ==> 1
secondByte ==> 2

jshell> int myTotal = (myMinIntValue / 2);
myTotal ==> -1073741824

//If variables are used in the expression, then the expression will be evaluated as an Integer, by default. Even if the final value falls within the bounds of the datatype of the variable being assigned, typecasting is necessary.
jshell> byte myNewByteValue = (myMinByteValue / 2);
|  Error:
|  incompatible types: possible lossy conversion from int to byte
|  byte myNewByteValue = (myMinByteValue / 2);
|                         ^----------------^

jshell> byte myNewByteValue = (-128/2);
myNewByteValue ==> -64

jshell> byte myNewByteValue = (byte)(myMinByteValue / 2);
myNewByteValue ==> -64

jshell> short myNewShortValue = (myNewShortValue / 2);
|  Error:
|  incompatible types: possible lossy conversion from int to short
|  short myNewShortValue = (myNewShortValue / 2);
|                           ^-----------------^

jshell> short myNewShortValue = (short) (myNewShortValue / 2);
myNewShortValue ==> 0

jshell> short myNewShortValue = (myNewSortValue / 2);
|  Error:
|  cannot find symbol
|    symbol:   variable myNewSortValue
|  short myNewShortValue = (myNewSortValue / 2);
|                           ^------------^

jshell> short myNewShortValue = (myMinSortValue / 2);
|  Error:
|  cannot find symbol
|    symbol:   variable myMinSortValue
|  short myNewShortValue = (myMinSortValue / 2);
|                           ^------------^

jshell> short myNewShortValue = (short)(myMinSortValue / 2);
|  Error:
|  cannot find symbol
|    symbol:   variable myMinSortValue
|  short myNewShortValue = (short)(myMinSortValue / 2);
|                                  ^------------^

jshell> short myNewShortValue = (MyMinSortValue / 2);
|  Error:
|  incompatible types: possible lossy conversion from int to short
|  short myNewShortValue = (MyMinSortValue / 2);
|                           ^----------------^

jshell> short myNewShortValue = (short)(MyMinSortValue / 2);
myNewShortValue ==> -16384

jshell> int testNum1 = 10L + 20;
|  Error:
|  incompatible types: possible lossy conversion from long to int
|  int testNum1 = 10L + 20;
|                 ^------^

// So this is what happens during numeric literal creation and assignment:
/**
	1. Check if the the numeric literal falls within the bounds of an Integer datatype
	2. If variables are not used on the expression, Evaluate the expression and Check if value can be assigned to the datatype of the variable. Also, the datatype of an entire expression is assumed to be that of the "highest" datatype (double > float > long > int > short > byte). So if the variable being assigned has a datatype that is lower than that of the expression, then, a error regarding lossy conversion will be thrown
	3. If variables are used in the expression, then the expression will be evaluated as an Integer, by default - if there is no higher datatype, say, long in the expression. In an expression, whichever is the higher datatype, the value of the expression is assumed to of that higher type. Even if the final value falls within the bounds of the datatype of the variable being assigned, typecasting is necessary if the dataype of the variable being assigned is lower than int.
**/

jshell> System.out.print(Byte.MIN_VALUE + " TO " + Byte.MAX_VALUE);
-128 TO 127
jshell> System.out.print(Short.MIN_VALUE + " TO " + Short.MAX_VALUE);
-32768 TO 32767
jshell> byte byteVar = 125;
byteVar ==> 125

jshell> short shortVar = 32000;
shortVar ==> 32000

jshell> int intVar = 123456;
intVar ==> 123456

jshell> long longVar = 50000 + (10 * (byteVar + shortVar + intVar));
longVar ==> 1605810

jshell> long longVar = 50000L + (10L * (byteVar + shortVar + intVar));
longVar ==> 1605810

jshell> long longVar = 50000000 + (10 * (byteVar + shortVar + intVar));
longVar ==> 51555810

jshell> long longVar = 50000000000000 + (10 * (byteVar + shortVar + intVar));
|  Error:
|  integer number too large
|  long longVar = 50000000000000 + (10 * (byteVar + shortVar + intVar));
|                 ^

jshell> System.out.print(Long.MIN_VALUE + " TO " + Long.MAX_VALUE);
-9223372036854775808 TO 9223372036854775807
jshell> long longVar = 50000000000000L + (10 * (byteVar + shortVar + intVar));
longVar ==> 50000001555810

jshell> long longVar = (long) (50000000000000 + (10 * (byteVar + shortVar + intVar)));
|  Error:
|  integer number too large
|  long longVar = (long) (50000000000000 + (10 * (byteVar + shortVar + intVar)));
|                         ^

jshell> short shortTotal = (1000 + 10 * (byteValue + shortValue + intValue));
|  Error:
|  cannot find symbol
|    symbol:   variable byteValue
|  short shortTotal = (1000 + 10 * (byteValue + shortValue + intValue));
|                                   ^-------^
|  Error:
|  cannot find symbol
|    symbol:   variable shortValue
|  short shortTotal = (1000 + 10 * (byteValue + shortValue + intValue));
|                                               ^--------^
|  Error:
|  cannot find symbol
|    symbol:   variable intValue
|  short shortTotal = (1000 + 10 * (byteValue + shortValue + intValue));
|                                                            ^------^

jshell> short shortTotal = (1000 + 10 * (byteVar + shortVar + intVar));
|  Error:
|  incompatible types: possible lossy conversion from int to short
|  short shortTotal = (1000 + 10 * (byteVar + shortVar + intVar));
|                      ^---------------------------------------^

jshell> short shortTotal = (short) (1000 + 10 * (byteVar + shortVar + intVar));
shortTotal ==> -16054